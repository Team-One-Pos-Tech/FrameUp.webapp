/* tslint:disable */
/* eslint-disable */
/**
 * Snack Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Category,
  GetProductResponse,
  ManageProductRequest,
  ManageProductResponse,
  ProblemDetails,
  ValidationProblemDetails,
} from '../models/index';
import {
    CategoryFromJSON,
    CategoryToJSON,
    GetProductResponseFromJSON,
    GetProductResponseToJSON,
    ManageProductRequestFromJSON,
    ManageProductRequestToJSON,
    ManageProductResponseFromJSON,
    ManageProductResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ValidationProblemDetailsFromJSON,
    ValidationProblemDetailsToJSON,
} from '../models/index';

export interface ApiProductV1CategoryGetRequest {
    category: Category;
}

export interface ApiProductV1IdDeleteRequest {
    id: string;
}

export interface ApiProductV1IdGetRequest {
    id: string;
}

export interface ApiProductV1IdPutRequest {
    id: string;
    manageProductRequest?: Omit<ManageProductRequest, 'notifications'|'isValid'>;
}

export interface ApiProductV1PostRequest {
    manageProductRequest?: Omit<ManageProductRequest, 'notifications'|'isValid'>;
}

/**
 * 
 */
export class ProductApi extends runtime.BaseAPI {

    /**
     */
    async apiProductV1CategoryGetRaw(requestParameters: ApiProductV1CategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProductResponse>>> {
        if (requestParameters['category'] == null) {
            throw new runtime.RequiredError(
                'category',
                'Required parameter "category" was null or undefined when calling apiProductV1CategoryGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Product/v1/{category}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters['category']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProductResponseFromJSON));
    }

    /**
     */
    async apiProductV1CategoryGet(requestParameters: ApiProductV1CategoryGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProductResponse>> {
        const response = await this.apiProductV1CategoryGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductV1GetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProductResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Product/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProductResponseFromJSON));
    }

    /**
     */
    async apiProductV1Get(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProductResponse>> {
        const response = await this.apiProductV1GetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductV1IdDeleteRaw(requestParameters: ApiProductV1IdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductV1IdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Product/v1/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiProductV1IdDelete(requestParameters: ApiProductV1IdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiProductV1IdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiProductV1IdGetRaw(requestParameters: ApiProductV1IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProductResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductV1IdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Product/v1/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProductResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProductV1IdGet(requestParameters: ApiProductV1IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProductResponse> {
        const response = await this.apiProductV1IdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductV1IdPutRaw(requestParameters: ApiProductV1IdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageProductResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiProductV1IdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Product/v1/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ManageProductRequestToJSON(requestParameters['manageProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManageProductResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProductV1IdPut(requestParameters: ApiProductV1IdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageProductResponse> {
        const response = await this.apiProductV1IdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiProductV1PostRaw(requestParameters: ApiProductV1PostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ManageProductResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Product/v1`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ManageProductRequestToJSON(requestParameters['manageProductRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ManageProductResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiProductV1Post(requestParameters: ApiProductV1PostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ManageProductResponse> {
        const response = await this.apiProductV1PostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
