/* tslint:disable */
/* eslint-disable */
/**
 * Snack Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  KitchenOrderResponse,
  ProblemDetails,
  UpdateKitchenOrderStatusRequest,
  UpdateKitchenOrderStatusResponse,
  ValidationProblemDetails,
} from '../models/index';
import {
    KitchenOrderResponseFromJSON,
    KitchenOrderResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateKitchenOrderStatusRequestFromJSON,
    UpdateKitchenOrderStatusRequestToJSON,
    UpdateKitchenOrderStatusResponseFromJSON,
    UpdateKitchenOrderStatusResponseToJSON,
    ValidationProblemDetailsFromJSON,
    ValidationProblemDetailsToJSON,
} from '../models/index';

export interface ApiKitchenOrderV1UpdateStatusPutRequest {
    updateKitchenOrderStatusRequest?: UpdateKitchenOrderStatusRequest;
}

/**
 * 
 */
export class KitchenOrderApi extends runtime.BaseAPI {

    /**
     */
    async apiKitchenOrderV1GetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<KitchenOrderResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/KitchenOrder/v1`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KitchenOrderResponseFromJSON));
    }

    /**
     */
    async apiKitchenOrderV1Get(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<KitchenOrderResponse>> {
        const response = await this.apiKitchenOrderV1GetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiKitchenOrderV1UpdateStatusPutRaw(requestParameters: ApiKitchenOrderV1UpdateStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateKitchenOrderStatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/KitchenOrder/v1/UpdateStatus`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateKitchenOrderStatusRequestToJSON(requestParameters['updateKitchenOrderStatusRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateKitchenOrderStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiKitchenOrderV1UpdateStatusPut(requestParameters: ApiKitchenOrderV1UpdateStatusPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateKitchenOrderStatusResponse> {
        const response = await this.apiKitchenOrderV1UpdateStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
