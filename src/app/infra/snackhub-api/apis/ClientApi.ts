/* tslint:disable */
/* eslint-disable */
/**
 * Snack Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetClientResponse,
} from '../models/index';
import {
    GetClientResponseFromJSON,
    GetClientResponseToJSON,
} from '../models/index';

export interface ApiClientV1CpfGetRequest {
    cpf: string;
}

export interface ApiClientV1IdGetRequest {
    id: string;
}

/**
 * 
 */
export class ClientApi extends runtime.BaseAPI {

    /**
     */
    async apiClientV1CpfGetRaw(requestParameters: ApiClientV1CpfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClientResponse>> {
        if (requestParameters['cpf'] == null) {
            throw new runtime.RequiredError(
                'cpf',
                'Required parameter "cpf" was null or undefined when calling apiClientV1CpfGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Client/v1/{cpf}`.replace(`{${"cpf"}}`, encodeURIComponent(String(requestParameters['cpf']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClientResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiClientV1CpfGet(requestParameters: ApiClientV1CpfGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClientResponse> {
        const response = await this.apiClientV1CpfGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiClientV1IdGetRaw(requestParameters: ApiClientV1IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetClientResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiClientV1IdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Client/v1/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetClientResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiClientV1IdGet(requestParameters: ApiClientV1IdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetClientResponse> {
        const response = await this.apiClientV1IdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
