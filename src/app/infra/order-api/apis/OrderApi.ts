/* tslint:disable */
/* eslint-disable */
/**
 * FrameUp.OrderService.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProcessingOrderResponse,
  GetProcessingOrderResponse,
  ProblemDetails,
  ResolutionTypes,
  UpdateProcessingOrderRequest,
  UpdateProcessingOrderResponse,
} from '../models/index';
import {
    CreateProcessingOrderResponseFromJSON,
    CreateProcessingOrderResponseToJSON,
    GetProcessingOrderResponseFromJSON,
    GetProcessingOrderResponseToJSON,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ResolutionTypesFromJSON,
    ResolutionTypesToJSON,
    UpdateProcessingOrderRequestFromJSON,
    UpdateProcessingOrderRequestToJSON,
    UpdateProcessingOrderResponseFromJSON,
    UpdateProcessingOrderResponseToJSON,
} from '../models/index';

export interface OrderCancelOrderIdPutRequest {
    orderId: string;
}

export interface OrderOrderIdGetRequest {
    orderId: string;
}

export interface OrderPostRequest {
    videos: Array<Blob>;
    captureInterval?: number;
    exportResolution?: ResolutionTypes;
}

export interface OrderPutRequest {
    updateProcessingOrderRequest?: UpdateProcessingOrderRequest;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {

    /**
     */
    async orderCancelOrderIdPutRaw(requestParameters: OrderCancelOrderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProcessingOrderResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling orderCancelOrderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Order/Cancel/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProcessingOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async orderCancelOrderIdPut(requestParameters: OrderCancelOrderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProcessingOrderResponse> {
        const response = await this.orderCancelOrderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetProcessingOrderResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Order`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetProcessingOrderResponseFromJSON));
    }

    /**
     */
    async orderGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetProcessingOrderResponse>> {
        const response = await this.orderGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async orderOrderIdGetRaw(requestParameters: OrderOrderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProcessingOrderResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling orderOrderIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Order/{orderId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProcessingOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async orderOrderIdGet(requestParameters: OrderOrderIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProcessingOrderResponse> {
        const response = await this.orderOrderIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderPostRaw(requestParameters: OrderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateProcessingOrderResponse>> {
        if (requestParameters['videos'] == null) {
            throw new runtime.RequiredError(
                'videos',
                'Required parameter "videos" was null or undefined when calling orderPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['captureInterval'] != null) {
            formParams.append('CaptureInterval', requestParameters['captureInterval'] as any);
        }

        if (requestParameters['exportResolution'] != null) {
            formParams.append('ExportResolution', requestParameters['exportResolution'] as any);
        }

        if (requestParameters['videos'] != null) {
            requestParameters['videos'].forEach((element) => {
                formParams.append('Videos', element as any);
            })
        }

        const response = await this.request({
            path: `/Order`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateProcessingOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async orderPost(requestParameters: OrderPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateProcessingOrderResponse> {
        const response = await this.orderPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async orderPutRaw(requestParameters: OrderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateProcessingOrderResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Order`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProcessingOrderRequestToJSON(requestParameters['updateProcessingOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateProcessingOrderResponseFromJSON(jsonValue));
    }

    /**
     */
    async orderPut(requestParameters: OrderPutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateProcessingOrderResponse> {
        const response = await this.orderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
