/* tslint:disable */
/* eslint-disable */
/**
 * FrameUp.OrderService.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VideoMetadataResponse } from './VideoMetadataResponse';
import {
    VideoMetadataResponseFromJSON,
    VideoMetadataResponseFromJSONTyped,
    VideoMetadataResponseToJSON,
    VideoMetadataResponseToJSONTyped,
} from './VideoMetadataResponse';
import type { ResolutionTypes } from './ResolutionTypes';
import {
    ResolutionTypesFromJSON,
    ResolutionTypesFromJSONTyped,
    ResolutionTypesToJSON,
    ResolutionTypesToJSONTyped,
} from './ResolutionTypes';
import type { PackageItemResponse } from './PackageItemResponse';
import {
    PackageItemResponseFromJSON,
    PackageItemResponseFromJSONTyped,
    PackageItemResponseToJSON,
    PackageItemResponseToJSONTyped,
} from './PackageItemResponse';
import type { ProcessingStatus } from './ProcessingStatus';
import {
    ProcessingStatusFromJSON,
    ProcessingStatusFromJSONTyped,
    ProcessingStatusToJSON,
    ProcessingStatusToJSONTyped,
} from './ProcessingStatus';
import type { Notification } from './Notification';
import {
    NotificationFromJSON,
    NotificationFromJSONTyped,
    NotificationToJSON,
    NotificationToJSONTyped,
} from './Notification';

/**
 * 
 * @export
 * @interface GetProcessingOrderResponse
 */
export interface GetProcessingOrderResponse {
    /**
     * 
     * @type {Array<Notification>}
     * @memberof GetProcessingOrderResponse
     */
    readonly notifications?: Array<Notification> | null;
    /**
     * 
     * @type {boolean}
     * @memberof GetProcessingOrderResponse
     */
    readonly isValid?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GetProcessingOrderResponse
     */
    id?: string;
    /**
     * 
     * @type {ProcessingStatus}
     * @memberof GetProcessingOrderResponse
     */
    status?: ProcessingStatus;
    /**
     * 
     * @type {string}
     * @memberof GetProcessingOrderResponse
     */
    ownerId?: string;
    /**
     * 
     * @type {Array<VideoMetadataResponse>}
     * @memberof GetProcessingOrderResponse
     */
    videos?: Array<VideoMetadataResponse> | null;
    /**
     * 
     * @type {ResolutionTypes}
     * @memberof GetProcessingOrderResponse
     */
    exportResolution?: ResolutionTypes;
    /**
     * 
     * @type {number}
     * @memberof GetProcessingOrderResponse
     */
    captureInterval?: number | null;
    /**
     * 
     * @type {Array<PackageItemResponse>}
     * @memberof GetProcessingOrderResponse
     */
    packages?: Array<PackageItemResponse> | null;
}



/**
 * Check if a given object implements the GetProcessingOrderResponse interface.
 */
export function instanceOfGetProcessingOrderResponse(value: object): value is GetProcessingOrderResponse {
    return true;
}

export function GetProcessingOrderResponseFromJSON(json: any): GetProcessingOrderResponse {
    return GetProcessingOrderResponseFromJSONTyped(json, false);
}

export function GetProcessingOrderResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetProcessingOrderResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'notifications': json['notifications'] == null ? undefined : ((json['notifications'] as Array<any>).map(NotificationFromJSON)),
        'isValid': json['isValid'] == null ? undefined : json['isValid'],
        'id': json['id'] == null ? undefined : json['id'],
        'status': json['status'] == null ? undefined : ProcessingStatusFromJSON(json['status']),
        'ownerId': json['ownerId'] == null ? undefined : json['ownerId'],
        'videos': json['videos'] == null ? undefined : ((json['videos'] as Array<any>).map(VideoMetadataResponseFromJSON)),
        'exportResolution': json['exportResolution'] == null ? undefined : ResolutionTypesFromJSON(json['exportResolution']),
        'captureInterval': json['captureInterval'] == null ? undefined : json['captureInterval'],
        'packages': json['packages'] == null ? undefined : ((json['packages'] as Array<any>).map(PackageItemResponseFromJSON)),
    };
}

export function GetProcessingOrderResponseToJSON(json: any): GetProcessingOrderResponse {
    return GetProcessingOrderResponseToJSONTyped(json, false);
}

export function GetProcessingOrderResponseToJSONTyped(value?: Omit<GetProcessingOrderResponse, 'notifications'|'isValid'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'status': ProcessingStatusToJSON(value['status']),
        'ownerId': value['ownerId'],
        'videos': value['videos'] == null ? undefined : ((value['videos'] as Array<any>).map(VideoMetadataResponseToJSON)),
        'exportResolution': ResolutionTypesToJSON(value['exportResolution']),
        'captureInterval': value['captureInterval'],
        'packages': value['packages'] == null ? undefined : ((value['packages'] as Array<any>).map(PackageItemResponseToJSON)),
    };
}

